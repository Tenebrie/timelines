services:
    gatekeeper:
        image: tenebrie/timelines-gatekeeper:${VERSION}
        build:
            context: ./app/gatekeeper-proxy
            dockerfile: ./Dockerfile.prod
        deploy:
            replicas: 1
            update_config:
                order: start-first
                parallelism: 1
                delay: 10s
                update_failure_action: rollback
        secrets:
            - environment
        volumes:
            - /mnt/volume_secrets/certs:/etc/letsencrypt:cached
    styx:
        image: tenebrie/timelines-styx:${VERSION}
        build:
            context: ./
            dockerfile: ./app/styx-frontend/Dockerfile.prod
        environment:
            NODE_ENV: production # Prod or staging
        command: yarn prod
        deploy:
            replicas: 2
            update_config:
                order: start-first
                parallelism: 1
                delay: 30s
                update_failure_action: rollback
        secrets:
            - environment
    rhea:
        image: tenebrie/timelines-rhea:${VERSION}
        build:
            context: ./
            dockerfile: ./app/rhea-backend/Dockerfile.prod
        environment:
            NODE_ENV: production # Prod or staging
            DATABASE_URL: postgresql://docker:docker@rhea-postgres:5432/db?schema=public
        command: yarn prod
        deploy:
            replicas: 2
            update_config:
                order: start-first
                parallelism: 1
                delay: 10s
                update_failure_action: rollback
        secrets:
            - jwt-secret
            - environment
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
            interval: 30s
            timeout: 10s
            retries: 5
    calliope:
        image: tenebrie/timelines-calliope:${VERSION}
        build:
            context: ./
            dockerfile: ./app/calliope-websockets/Dockerfile.prod
        environment:
            NODE_ENV: production # Prod or staging
        command: yarn prod
        deploy:
            replicas: 2
            update_config:
                order: start-first
                parallelism: 1
                delay: 10s
                update_failure_action: rollback
        secrets:
            - jwt-secret
            - environment
    rhea-postgres:
        volumes:
            - /mnt/volume_rhea_postgres/data:/var/lib/postgresql/data/:cached
            - /mnt/volume_rhea_postgres/backups:/backups:cached
    cron-db-backup:
        image: alpine:3.12
        volumes:
            - ./scripts:/scripts
            - /mnt/volume_rhea_postgres/backups:/backups
            - ~/.aws:/root/.aws:ro
        secrets:
            - environment
        entrypoint: sh -c "apk add --no-cache awscli cron && crontab /scripts/cron-db-backup.cron && crond -f -L /dev/stdout"



# docker secret create jwt-secret /mnt/volume_secrets/keys/jwt-secret.txt
# echo "production" | docker secret create ENVIRONMENT -
secrets:
    jwt-secret:
        external: true
    environment:
        external: true
