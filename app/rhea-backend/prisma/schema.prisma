// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @unique @default(uuid())
  email    String    @unique
  username String
  password String
  worlds   World[]
  level    UserLevel @default(Free)
}

enum UserLevel {
  Free
  Premium
  Admin
}

enum WorldCalendarType {
  COUNTUP
  EARTH
  PF2E
  RIMWORLD
}

model World {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name       String
  actors     Actor[]
  events     WorldEvent[]
  calendar   WorldCalendarType @default(COUNTUP)
  timeOrigin BigInt            @default(0)

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String
}

enum WorldEventType {
  SCENE
  OTHER
}

enum WorldEventField {
  RevokedAt
  EventIcon
  TargetActors
  MentionedActors
}

model WorldEvent {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type        WorldEventType
  icon        String            @default("default")
  name        String
  timestamp   BigInt
  revokedAt   BigInt?
  description String            @default("")
  customName  Boolean           @default(false)
  extraFields WorldEventField[]

  world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId String

  targetActors     Actor[] @relation("EventTargetActors")
  mentionedActors  Actor[] @relation("EventMentionedActors")
  introducedActors Actor[] @relation(name: "EventIntroducedActors")
  terminatedActors Actor[] @relation(name: "EventTerminatedActors")

  deltaStates WorldEventDelta[]
}

model WorldEventDelta {
  id        String @id @unique @default(uuid())
  timestamp BigInt

  name        String?
  description String?
  customName  Boolean?

  worldEventId String
  worldEvent   WorldEvent @relation(fields: [worldEventId], references: [id])
}

model Actor {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name        String
  title       String @default("")
  description String @default("")
  color       String @default("")

  introducedIn WorldEvent[] @relation(name: "EventIntroducedActors")
  terminatedIn WorldEvent[] @relation(name: "EventTerminatedActors")

  statements            WorldEvent[]        @relation("EventTargetActors")
  mentionedIn           WorldEvent[]        @relation("EventMentionedActors")
  relationships         ActorRelationship[] @relation(name: "ActorRelationships")
  receivedRelationships ActorRelationship[] @relation(name: "ReceivedActorRelationships")
  world                 World               @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId               String
}

model ActorRelationship {
  originId   String
  receiverId String
  origin     Actor  @relation(name: "ActorRelationships", fields: [originId], references: [id])
  receiver   Actor  @relation(name: "ReceivedActorRelationships", fields: [receiverId], references: [id])

  name String

  @@id([originId, receiverId])
}
