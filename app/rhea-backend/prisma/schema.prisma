// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @unique @default(uuid())
  email    String  @unique
  username String
  password String
  worlds   World[]
}

model World {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name       String
  actors     Actor[]
  events     WorldEvent[]
  calendar   WorldCalendarType @default(COUNTUP)
  timeOrigin BigInt            @default(0)

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String
}

enum WorldEventType {
  SCENE
  OTHER
}

enum WorldCalendarType {
  COUNTUP
  EARTH
  PF2E
  RIMWORLD
}

model WorldEvent {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type        WorldEventType
  icon        String         @default("default")
  name        String
  timestamp   BigInt
  description String         @default("")

  issuedStatements  WorldStatement[] @relation(name: "StatementsIssuedByEvent")
  revokedStatements WorldStatement[] @relation(name: "StatementsRevokedByEvent")

  world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId String
}

model WorldStatement {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title String
  text  String @default("")

  issuedBy         WorldEvent  @relation(name: "StatementsIssuedByEvent", fields: [issuedByEventId], references: [id], onDelete: Cascade)
  revokedBy        WorldEvent? @relation(name: "StatementsRevokedByEvent", fields: [revokedByEventId], references: [id])
  issuedByEventId  String
  revokedByEventId String?

  replaces              WorldStatement? @relation(name: "ReplacedStatement", fields: [replacedStatementId], references: [id])
  replacedBy            WorldStatement? @relation(name: "ReplacedStatement")
  replacedStatementId   String?         @unique
  replacedByStatementId String?         @unique

  relatedActors Actor[]
}

model Actor {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name        String
  title       String @default("")
  description String @default("")

  statements            WorldStatement[]
  relationships         ActorRelationship[] @relation(name: "ActorRelationships")
  receivedRelationships ActorRelationship[] @relation(name: "ReceivedActorRelationships")
  world                 World               @relation(fields: [worldId], references: [id])
  worldId               String
}

model ActorRelationship {
  originId   String
  receiverId String
  origin     Actor  @relation(name: "ActorRelationships", fields: [originId], references: [id])
  receiver   Actor  @relation(name: "ReceivedActorRelationships", fields: [receiverId], references: [id])

  name String

  @@id([originId, receiverId])
}
