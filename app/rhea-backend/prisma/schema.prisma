// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  email    String @unique
  username String
  password String

  level         UserLevel          @default(Free)
  notifications UserAnnouncement[]

  worlds          World[]
  collaboratingIn CollaboratingUser[]
}

enum UserLevel {
  Free
  Premium
  Admin
}

enum WorldCalendarType {
  COUNTUP
  EARTH
  PF2E
  RIMWORLD
  EXETHER
}

enum WorldAccessMode {
  Private
  PublicRead
  PublicEdit
}

model World {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name       String
  actors     Actor[]
  events     WorldEvent[]
  calendar   WorldCalendarType @default(COUNTUP)
  timeOrigin BigInt            @default(0)

  owner            User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId          String
  accessMode       WorldAccessMode     @default(Private)
  collaborators    CollaboratingUser[]
  worldEventTracks WorldEventTrack[]
}

enum WorldEventType {
  SCENE
  OTHER
}

enum WorldEventField {
  RevokedAt
  EventIcon
  TargetActors
  MentionedActors
  ExternalLink
}

model WorldEvent {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type         WorldEventType
  icon         String            @default("default")
  name         String
  timestamp    BigInt
  revokedAt    BigInt?
  description  String            @default("")
  customName   Boolean           @default(false)
  externalLink String            @default("")
  extraFields  WorldEventField[]

  world             World            @relation(fields: [worldId], references: [id], onDelete: Cascade)
  track             WorldEventTrack? @relation(fields: [worldEventTrackId], references: [id], onDelete: Cascade)
  worldId           String
  worldEventTrackId String?

  targetActors     Actor[] @relation("EventTargetActors")
  mentionedActors  Actor[] @relation("EventMentionedActors")
  introducedActors Actor[] @relation(name: "EventIntroducedActors")
  terminatedActors Actor[] @relation(name: "EventTerminatedActors")

  deltaStates WorldEventDelta[]
}

model WorldEventDelta {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  timestamp BigInt

  name        String?
  description String?

  worldEventId String
  worldEvent   WorldEvent @relation(fields: [worldEventId], references: [id], onDelete: Cascade)
}

model WorldEventTrack {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name     String
  position Int
  visible  Boolean @default(true)

  world   World  @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId String

  events WorldEvent[]
}

model Actor {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name        String
  title       String @default("")
  description String @default("")
  color       String @default("")

  introducedIn WorldEvent[] @relation(name: "EventIntroducedActors")
  terminatedIn WorldEvent[] @relation(name: "EventTerminatedActors")

  statements            WorldEvent[]        @relation("EventTargetActors")
  mentionedIn           WorldEvent[]        @relation("EventMentionedActors")
  relationships         ActorRelationship[] @relation(name: "ActorRelationships")
  receivedRelationships ActorRelationship[] @relation(name: "ReceivedActorRelationships")
  world                 World               @relation(fields: [worldId], references: [id], onDelete: Cascade)
  worldId               String
}

model ActorRelationship {
  originId   String
  receiverId String
  origin     Actor  @relation(name: "ActorRelationships", fields: [originId], references: [id])
  receiver   Actor  @relation(name: "ReceivedActorRelationships", fields: [receiverId], references: [id])

  name String

  @@id([originId, receiverId])
}

enum CollaboratorAccess {
  ReadOnly
  Editing
}

model CollaboratingUser {
  user   User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  world  World              @relation(fields: [worldId], references: [id], onDelete: Cascade)
  access CollaboratorAccess

  userId  String
  worldId String

  @@id([userId, worldId])
}

enum AnnouncementType {
  Info
  Welcome
  WorldShared
}

model UserAnnouncement {
  id        String   @id @unique @default(uuid())
  timestamp DateTime @default(now())

  isUnread Boolean @default(true)

  type        AnnouncementType
  title       String
  description String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}
