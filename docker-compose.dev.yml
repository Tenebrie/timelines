version: '3.8'
services:
    gatekeeper:
        stop_grace_period: 0s
        build:
            context: ./app/gatekeeper-proxy
            dockerfile: ./Dockerfile
        networks:
            - dev_network
    styx:
        build:
            context: ./
            args:
                DOCKER_UID: ${DOCKER_UID}
                DOCKER_GID: ${DOCKER_GID}
            dockerfile: ./app/styx-frontend/Dockerfile
        user: "${DOCKER_UID}:${DOCKER_GID}"
        environment:
            NODE_ENV: development
            DANGEROUSLY_DISABLE_HOST_CHECK: "true" # For React dev server to work behind Gatekeeper
            # Fake docker secrets
            environment: development
        volumes:
            - ./app/styx-frontend/src:/app/styx/src:cached
            - ./app/styx-frontend/public:/app/styx/public:cached
            - ./app/ts-shared/src:/app/ts-shared/src:cached
            - type: bind
              source: ./app/styx-frontend/vite.config.ts
              target: /app/styx/vite.config.ts
        ports:
            - 8080:8080
        networks:
            - dev_network
        command: yarn start
        tty: true
        restart: on-failure
    rhea:
        build:
            context: ./
            dockerfile: ./app/rhea-backend/Dockerfile
        environment:
            NODE_ENV: development
            DATABASE_URL: postgresql://docker:docker@rhea-postgres:5432/db?schema=public
            # Fake docker secrets
            environment: development
            jwt-secret: secretkey
            s3-endpoint: http://s3-minio:9000
            s3-bucket-id: bucket
            s3-access-key-id: devuser
            s3-access-key-secret: devsecret
        volumes:
            - ./app/rhea-backend/src:/app/rhea/src:cached
            - ./app/rhea-backend/prisma:/app/rhea/prisma:cached
            - ./app/ts-shared/src:/app/ts-shared/src:cached
        ports:
            - 3000:3000
        networks:
            - dev_network
        command: yarn start
        tty: true
        restart: on-failure
    calliope:
        build:
            context: ./
            dockerfile: ./app/calliope-websockets/Dockerfile
        environment:
            NODE_ENV: development
            # Fake docker secrets
            environment: development
            jwt-secret: secretkey
        volumes:
            - ./app/calliope-websockets/src:/app/calliope/src:cached
            - ./app/ts-shared/src:/app/ts-shared/src:cached
        ports:
            - 3001:3001
        networks:
            - dev_network
        command: yarn start
        tty: true
        restart: on-failure
    rhea-postgres:
        environment:
            POSTGRES_USER: docker
            POSTGRES_PASSWORD: docker
            POSTGRES_DB: db
        ports:
            - 5432:5432
        volumes:
            - rhea-db:/var/lib/postgresql/data/:cached
        restart: on-failure
        networks:
            - dev_network
    redis:
        ports:
            - "6379:6379"
        networks:
            - dev_network
    s3-minio:
        image: minio/minio
        ports:
            - "9000:9000" # API
            - "9001:9001" # Console
        environment:
            MINIO_ROOT_USER: admin
            MINIO_ROOT_PASSWORD: adminpassword
            MINIO_BROWSER_LOG_LEVEL: debug
            MINIO_API_LOG_LEVEL: debug
        volumes:
            - minio_data:/data
        command: server /data --console-address ":9001"
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://s3-minio:9000/minio/health/live" ]
            interval: 5s
            timeout: 5s
            retries: 3
        networks:
            - dev_network
    s3-minio-setup:
        image: minio/mc
        depends_on:
            s3-minio:
                condition: service_healthy
        entrypoint: >
            /bin/sh -c "
                mc alias set minio-dev http://s3-minio:9000 admin adminpassword;
                mc mb --ignore-existing minio-dev/bucket;
                mc admin user add minio-dev devuser devsecret;
                mc admin policy attach minio-dev readwrite --user devuser;
                echo 'MinIO setup completed successfully';
            "
        networks:
            - dev_network
volumes:
    redis:
    rhea-db:
    minio_data:

networks:
    dev_network:
        name: timelines_dev_network
